Performing C SOURCE FILE Test HAVE_C_SHIFT_OR_OPTIMIZATION_BUG failed with the following compile output:
Change Dir: /home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/make cmTC_0e3c4/fast && /usr/bin/make -f CMakeFiles/cmTC_0e3c4.dir/build.make CMakeFiles/cmTC_0e3c4.dir/build
make[1]: Entering directory '/home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_0e3c4.dir/src.c.o
/usr/bin/cc   -DHAVE_C_SHIFT_OR_OPTIMIZATION_BUG  -O3 -fexpensive-optimizations   -o CMakeFiles/cmTC_0e3c4.dir/src.c.o   -c /home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_0e3c4
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_0e3c4.dir/link.txt --verbose=1
/usr/bin/cc  -DHAVE_C_SHIFT_OR_OPTIMIZATION_BUG  -O3 -fexpensive-optimizations    -rdynamic CMakeFiles/cmTC_0e3c4.dir/src.c.o  -o cmTC_0e3c4 
make[1]: Leaving directory '/home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp'


...and run output:

Return value: 1
Source file was:

  struct X
  {
    int i;
    unsigned short s;
  };

  unsigned __attribute__((noinline)) f(struct X x)
  {
    return x.s | (x.i << 16);
  }

  int
  main()
  {
    struct X x;
    x.i = 0x00001234;
    x.s = 0x5678;
    unsigned y = f(x);
    /* Succeed (return 0) if compiler have bug */
    return y == 0x12345678 ? 1 : 0;
  }

Performing C++ SOURCE FILE Test HAVE_CXX_SHIFT_OR_OPTIMIZATION_BUG failed with the following output:
Change Dir: /home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/make cmTC_f7d54/fast && /usr/bin/make -f CMakeFiles/cmTC_f7d54.dir/build.make CMakeFiles/cmTC_f7d54.dir/build
make[1]: Entering directory '/home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_f7d54.dir/src.cxx.o
/usr/bin/c++    -DHAVE_CXX_SHIFT_OR_OPTIMIZATION_BUG  -O3 -fexpensive-optimizations   -o CMakeFiles/cmTC_f7d54.dir/src.cxx.o -c /home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_f7d54
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_f7d54.dir/link.txt --verbose=1
/usr/bin/c++   -DHAVE_CXX_SHIFT_OR_OPTIMIZATION_BUG  -O3 -fexpensive-optimizations    -rdynamic CMakeFiles/cmTC_f7d54.dir/src.cxx.o  -o cmTC_f7d54 
make[1]: Leaving directory '/home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp'


...and run output:

Return value: 1
Source file was:

  struct X
  {
    int i;
    unsigned short s;
  };

  unsigned __attribute__((noinline)) f(struct X x)
  {
    return x.s | (x.i << 16);
  }

  int
  main()
  {
    struct X x;
    x.i = 0x00001234;
    x.s = 0x5678;
    unsigned y = f(x);
    /* Succeed (return 0) if compiler have bug */
    return y == 0x12345678 ? 1 : 0;
  }

Performing C SOURCE FILE Test HAVE_C_FLOATING_POINT_FUSED_MADD failed with the following compile output:
Change Dir: /home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/make cmTC_e536f/fast && /usr/bin/make -f CMakeFiles/cmTC_e536f.dir/build.make CMakeFiles/cmTC_e536f.dir/build
make[1]: Entering directory '/home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_e536f.dir/src.c.o
/usr/bin/cc   -DHAVE_C_FLOATING_POINT_FUSED_MADD  -O3   -o CMakeFiles/cmTC_e536f.dir/src.c.o   -c /home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_e536f
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_e536f.dir/link.txt --verbose=1
/usr/bin/cc  -DHAVE_C_FLOATING_POINT_FUSED_MADD  -O3    -rdynamic CMakeFiles/cmTC_e536f.dir/src.c.o  -o cmTC_e536f 
make[1]: Leaving directory '/home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp'


...and run output:

Return value: 1
Source file was:

  int main (int argc, char **argv)
  {
    double n[21] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 1, 1, 1, 1, 1, 1, 1,1 };
    double m= 0, s= 0;
    int i;
    for(i= 0; i < 21; i++)
    {
      double m_kminusone= m;
      m= m_kminusone + (n[i] - m_kminusone) / (double) (i + 2);
      s= s + (n[i] - m_kminusone) * (n[i] - m);
    }
    /*
      s should now be either 5e 74 d1 45 17 5d 14 40 or
      40 14 5d 17 45 d1 74 5e, depending on endianness. If the floating point
      operations are optimized with fused multiply-add instructions, the least
      significant byte is 5d instead of 5e.
    */
    return (*(unsigned char*)(&s) == 0x5e ||
            *((unsigned char*)(&s) + 7) == 0x5e);
  }
Performing C++ SOURCE FILE Test HAVE_CXX_FLOATING_POINT_FUSED_MADD failed with the following output:
Change Dir: /home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/make cmTC_55566/fast && /usr/bin/make -f CMakeFiles/cmTC_55566.dir/build.make CMakeFiles/cmTC_55566.dir/build
make[1]: Entering directory '/home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_55566.dir/src.cxx.o
/usr/bin/c++    -DHAVE_CXX_FLOATING_POINT_FUSED_MADD  -O3   -o CMakeFiles/cmTC_55566.dir/src.cxx.o -c /home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_55566
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_55566.dir/link.txt --verbose=1
/usr/bin/c++   -DHAVE_CXX_FLOATING_POINT_FUSED_MADD  -O3    -rdynamic CMakeFiles/cmTC_55566.dir/src.cxx.o  -o cmTC_55566 
make[1]: Leaving directory '/home/wei/WorkSpace/open_source/my-sql/001.SOURCE_CODE/mysql-server-5.7/BUILD/CMakeFiles/CMakeTmp'


...and run output:

Return value: 1
Source file was:

  int main (int argc, char **argv)
  {
    double n[21] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 1, 1, 1, 1, 1, 1, 1,1 };
    double m= 0, s= 0;
    int i;
    for(i= 0; i < 21; i++)
    {
      double m_kminusone= m;
      m= m_kminusone + (n[i] - m_kminusone) / (double) (i + 2);
      s= s + (n[i] - m_kminusone) * (n[i] - m);
    }
    /*
      s should now be either 5e 74 d1 45 17 5d 14 40 or
      40 14 5d 17 45 d1 74 5e, depending on endianness. If the floating point
      operations are optimized with fused multiply-add instructions, the least
      significant byte is 5d instead of 5e.
    */
    return (*(unsigned char*)(&s) == 0x5e ||
            *((unsigned char*)(&s) + 7) == 0x5e);
  }
